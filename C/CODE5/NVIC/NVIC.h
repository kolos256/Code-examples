#ifndef _NVIC_H_
#define _NVIC_H_

#include "CORE\CORE.h"
#ifdef USECONF
#include "CONF.h"
#include "devlist.h"
#endif//USECONF

#if (defined(CORTEXM4)||defined(CORTEXM3)||defined(CORTEXM0))
typedef struct
{
  union
  {
    volatile U32 REG[3];
    struct
    {
      volatile U32 ISE0:1,ISE1:1,ISE2:1,ISE3:1,ISE4:1,ISE5:1,ISE6:1,ISE7:1,ISE8:1,ISE9:1,ISE10:1,ISE11:1,ISE12:1,ISE13:1,ISE14:1,ISE15:1,ISE16:1,ISE17:1,ISE18:1,ISE19:1,ISE20:1,ISE21:1,ISE22:1,ISE23:1,ISE24:1,ISE25:1,ISE26:1,ISE27:1,ISE28:1,ISE29:1,ISE30:1,ISE31:1;
      volatile U32 ISE32:1,ISE33:1,ISE34:1,ISE35:1,ISE36:1,ISE37:1,ISE38:1,ISE39:1,ISE40:1,ISE41:1,ISE42:1,ISE43:1,ISE44:1,ISE45:1,ISE46:1,ISE47:1,ISE48:1,ISE49:1,ISE50:1,ISE51:1,ISE52:1,ISE53:1,ISE54:1,ISE55:1,ISE56:1,ISE57:1,ISE58:1,ISE59:1,ISE60:1,ISE61:1,ISE62:1,ISE63:1;
      volatile U32 ISE64:1,ISE65:1,ISE66:1,ISE67:1,ISE68:1,ISE69:1,ISE70:1,ISE71:1,ISE72:1,ISE73:1,ISE74:1,ISE75:1,ISE76:1,ISE77:1,ISE78:1,ISE79:1,ISE80:1,ISE81:1,ISE82:1,ISE83:1,ISE84:1,ISE85:1,ISE86:1,ISE87:1,ISE88:1,ISE89:1,ISE90:1,ISE91:1,ISE92:1,ISE93:1,ISE94:1,ISE95:1;
    }BIT;
  }ISER;
  const U32 RESERVED1[29];
  union
  {
    volatile U32 REG[3];
    struct
    {
      volatile U32 ICE0:1,ICE1:1,ICE2:1,ICE3:1,ICE4:1,ICE5:1,ICE6:1,ICE7:1,ICE8:1,ICE9:1,ICE10:1,ICE11:1,ICE12:1,ICE13:1,ICE14:1,ICE15:1,ICE16:1,ICE17:1,ICE18:1,ICE19:1,ICE20:1,ICE21:1,ICE22:1,ICE23:1,ICE24:1,ICE25:1,ICE26:1,ICE27:1,ICE28:1,ICE29:1,ICE30:1,ICE31:1;
      volatile U32 ICE32:1,ICE33:1,ICE34:1,ICE35:1,ICE36:1,ICE37:1,ICE38:1,ICE39:1,ICE40:1,ICE41:1,ICE42:1,ICE43:1,ICE44:1,ICE45:1,ICE46:1,ICE47:1,ICE48:1,ICE49:1,ICE50:1,ICE51:1,ICE52:1,ICE53:1,ICE54:1,ICE55:1,ICE56:1,ICE57:1,ICE58:1,ICE59:1,ICE60:1,ICE61:1,ICE62:1,ICE63:1;
      volatile U32 ICE64:1,ICE65:1,ICE66:1,ICE67:1,ICE68:1,ICE69:1,ICE70:1,ICE71:1,ICE72:1,ICE73:1,ICE74:1,ICE75:1,ICE76:1,ICE77:1,ICE78:1,ICE79:1,ICE80:1,ICE81:1,ICE82:1,ICE83:1,ICE84:1,ICE85:1,ICE86:1,ICE87:1,ICE88:1,ICE89:1,ICE90:1,ICE91:1,ICE92:1,ICE93:1,ICE94:1,ICE95:1;
    }BIT;
  }ICER;
  const U32 RESERVED2[29];
  union
  {
    volatile U32 REG[3];
    struct
    {
      volatile U32 ISP0:1,ISP1:1,ISP2:1,ISP3:1,ISP4:1,ISP5:1,ISP6:1,ISP7:1,ISP8:1,ISP9:1,ISP10:1,ISP11:1,ISP12:1,ISP13:1,ISP14:1,ISP15:1,ISP16:1,ISP17:1,ISP18:1,ISP19:1,ISP20:1,ISP21:1,ISP22:1,ISP23:1,ISP24:1,ISP25:1,ISP26:1,ISP27:1,ISP28:1,ISP29:1,ISP30:1,ISP31:1;
      volatile U32 ISP32:1,ISP33:1,ISP34:1,ISP35:1,ISP36:1,ISP37:1,ISP38:1,ISP39:1,ISP40:1,ISP41:1,ISP42:1,ISP43:1,ISP44:1,ISP45:1,ISP46:1,ISP47:1,ISP48:1,ISP49:1,ISP50:1,ISP51:1,ISP52:1,ISP53:1,ISP54:1,ISP55:1,ISP56:1,ISP57:1,ISP58:1,ISP59:1,ISP60:1,ISP61:1,ISP62:1,ISP63:1;
      volatile U32 ISP64:1,ISP65:1,ISP66:1,ISP67:1,ISP68:1,ISP69:1,ISP70:1,ISP71:1,ISP72:1,ISP73:1,ISP74:1,ISP75:1,ISP76:1,ISP77:1,ISP78:1,ISP79:1,ISP80:1,ISP81:1,ISP82:1,ISP83:1,ISP84:1,ISP85:1,ISP86:1,ISP87:1,ISP88:1,ISP89:1,ISP90:1,ISP91:1,ISP92:1,ISP93:1,ISP94:1,ISP95:1;
    }BIT;
  }ISPR;
  volatile const U32 RESERVED3[29];
  union
  {
    volatile U32 REG[3];
    struct
    {
      volatile U32 ICP0:1,ICP1:1,ICP2:1,ICP3:1,ICP4:1,ICP5:1,ICP6:1,ICP7:1,ICP8:1,ICP9:1,ICP10:1,ICP11:1,ICP12:1,ICP13:1,ICP14:1,ICP15:1,ICP16:1,ICP17:1,ICP18:1,ICP19:1,ICP20:1,ICP21:1,ICP22:1,ICP23:1,ICP24:1,ICP25:1,ICP26:1,ICP27:1,ICP28:1,ICP29:1,ICP30:1,ICP31:1;
      volatile U32 ICP32:1,ICP33:1,ICP34:1,ICP35:1,ICP36:1,ICP37:1,ICP38:1,ICP39:1,ICP40:1,ICP41:1,ICP42:1,ICP43:1,ICP44:1,ICP45:1,ICP46:1,ICP47:1,ICP48:1,ICP49:1,ICP50:1,ICP51:1,ICP52:1,ICP53:1,ICP54:1,ICP55:1,ICP56:1,ICP57:1,ICP58:1,ICP59:1,ICP60:1,ICP61:1,ICP62:1,ICP63:1;
      volatile U32 ICP64:1,ICP65:1,ICP66:1,ICP67:1,ICP68:1,ICP69:1,ICP70:1,ICP71:1,ICP72:1,ICP73:1,ICP74:1,ICP75:1,ICP76:1,ICP77:1,ICP78:1,ICP79:1,ICP80:1,ICP81:1,ICP82:1,ICP83:1,ICP84:1,ICP85:1,ICP86:1,ICP87:1,ICP88:1,ICP89:1,ICP90:1,ICP91:1,ICP92:1,ICP93:1,ICP94:1,ICP95:1;
    }BIT;
  }ICPR;
  volatile const U32 RESERVED4[29];
  union
  {
    volatile U32 REG[3];
    struct
    {
      volatile U32 IAB0:1,IAB1:1,IAB2:1,IAB3:1,IAB4:1,IAB5:1,IAB6:1,IAB7:1,IAB8:1,IAB9:1,IAB10:1,IAB11:1,IAB12:1,IAB13:1,IAB14:1,IAB15:1,IAB16:1,IAB17:1,IAB18:1,IAB19:1,IAB20:1,IAB21:1,IAB22:1,IAB23:1,IAB24:1,IAB25:1,IAB26:1,IAB27:1,IAB28:1,IAB29:1,IAB30:1,IAB31:1;
      volatile U32 IAB32:1,IAB33:1,IAB34:1,IAB35:1,IAB36:1,IAB37:1,IAB38:1,IAB39:1,IAB40:1,IAB41:1,IAB42:1,IAB43:1,IAB44:1,IAB45:1,IAB46:1,IAB47:1,IAB48:1,IAB49:1,IAB50:1,IAB51:1,IAB52:1,IAB53:1,IAB54:1,IAB55:1,IAB56:1,IAB57:1,IAB58:1,IAB59:1,IAB60:1,IAB61:1,IAB62:1,IAB63:1;
      volatile U32 IAB64:1,IAB65:1,IAB66:1,IAB67:1,IAB68:1,IAB69:1,IAB70:1,IAB71:1,IAB72:1,IAB73:1,IAB74:1,IAB75:1,IAB76:1,IAB77:1,IAB78:1,IAB79:1,IAB80:1,IAB81:1,IAB82:1,IAB83:1,IAB84:1,IAB85:1,IAB86:1,IAB87:1,IAB88:1,IAB89:1,IAB90:1,IAB91:1,IAB92:1,IAB93:1,IAB94:1,IAB95:1;
    }BIT;
  }IABR;
  volatile const U32 RESERVED5[61];
  union
  {
    volatile U32 REG[21];
    volatile U8 IPR[80];
    struct
    {
      volatile U32  IPR0:8, IPR1:8, IPR2:8, IPR3:8;
      volatile U32  IPR4:8, IPR5:8, IPR6:8, IPR7:8;
      volatile U32  IPR8:8, IPR9:8,IPR10:8,IPR11:8;
      volatile U32 IPR12:8,IPR13:8,IPR14:8,IPR15:8;
      volatile U32 IPR16:8,IPR17:8,IPR18:8,IPR19:8;
      volatile U32 IPR20:8,IPR21:8,IPR22:8,IPR23:8;
      volatile U32 IPR24:8,IPR25:8,IPR26:8,IPR27:8;
      volatile U32 IPR28:8,IPR29:8,IPR30:8,IPR31:8;
      volatile U32 IPR32:8,IPR33:8,IPR34:8,IPR35:8;
      volatile U32 IPR36:8,IPR37:8,IPR38:8,IPR39:8;
      volatile U32 IPR40:8,IPR41:8,IPR42:8,IPR43:8;
      volatile U32 IPR44:8,IPR45:8,IPR46:8,IPR47:8;
      volatile U32 IPR48:8,IPR49:8,IPR50:8,IPR51:8;
      volatile U32 IPR52:8,IPR53:8,IPR54:8,IPR55:8;
      volatile U32 IPR56:8,IPR57:8,IPR58:8,IPR59:8;
      volatile U32 IPR60:8,IPR61:8,IPR62:8,IPR63:8;
      volatile U32 IPR64:8,IPR65:8,IPR66:8,IPR67:8;
      volatile U32 IPR68:8,IPR69:8,IPR70:8,IPR71:8;
      volatile U32 IPR72:8,IPR73:8,IPR74:8,IPR75:8;
      volatile U32 IPR76:8,IPR77:8,IPR78:8,IPR79:8;
      volatile U32 IPR80:8,:24;
    }BIT;
  }IPR;
  const U32 RESERVED6[695];
  union
  {
    volatile U32 VALUE;
    struct
    {
     volatile U32 INTID:9,:23;
    }BIT;
  }SITR;
}NVIC_BYTES;

#define NVIC (*((NVIC_BYTES*)NVIC_BASE))

#define NVIC_SETPRIORITY(NUMBER,PRIORITY) NVIC.IPR.IPR[NUMBER]=(PRIORITY<<4);
//#define NVIC_ISE(NUMBER) BITSET8((NVIC_ISER0+(NUMBER/8)),(NUMBER%8));
typedef struct
{
   U8 IRQNUMBER;
   U8 PRIORITY;
   State ISE;
}NVICLINECONFIG;

extern void NVICIRQCONFIG(NVICLINECONFIG CONFIG);
extern void NVICIRQENCMD(U8 IRQNUMBER,State CMD);
#endif//CORTEXM4



#endif//_NVIC_H_
